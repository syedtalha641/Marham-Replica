import {
  require_react_dom
} from "./chunk-VPTIPXRI.js";
import {
  require_react
} from "./chunk-4UQS7KPA.js";
import {
  __commonJS
} from "./chunk-2GTGKKMZ.js";

// node_modules/classnames/index.js
var require_classnames = __commonJS({
  "node_modules/classnames/index.js"(exports, module) {
    (function() {
      "use strict";
      var hasOwn = {}.hasOwnProperty;
      var nativeCodeString = "[native code]";
      function classNames() {
        var classes = [];
        for (var i = 0; i < arguments.length; i++) {
          var arg = arguments[i];
          if (!arg)
            continue;
          var argType = typeof arg;
          if (argType === "string" || argType === "number") {
            classes.push(arg);
          } else if (Array.isArray(arg)) {
            if (arg.length) {
              var inner = classNames.apply(null, arg);
              if (inner) {
                classes.push(inner);
              }
            }
          } else if (argType === "object") {
            if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) {
              classes.push(arg.toString());
              continue;
            }
            for (var key in arg) {
              if (hasOwn.call(arg, key) && arg[key]) {
                classes.push(key);
              }
            }
          }
        }
        return classes.join(" ");
      }
      if (typeof module !== "undefined" && module.exports) {
        classNames.default = classNames;
        module.exports = classNames;
      } else if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
        define("classnames", [], function() {
          return classNames;
        });
      } else {
        window.classNames = classNames;
      }
    })();
  }
});

// node_modules/underscore.deferred/underscore.deferred.js
var require_underscore_deferred = __commonJS({
  "node_modules/underscore.deferred/underscore.deferred.js"(exports, module) {
    (function(root) {
      var breaker = {}, AP = Array.prototype, OP = Object.prototype, hasOwn = OP.hasOwnProperty, toString = OP.toString, forEach = AP.forEach, indexOf = AP.indexOf, slice = AP.slice;
      var _each = function(obj, iterator, context) {
        var key, i, l;
        if (!obj) {
          return;
        }
        if (forEach && obj.forEach === forEach) {
          obj.forEach(iterator, context);
        } else if (obj.length === +obj.length) {
          for (i = 0, l = obj.length; i < l; i++) {
            if (i in obj && iterator.call(context, obj[i], i, obj) === breaker) {
              return;
            }
          }
        } else {
          for (key in obj) {
            if (hasOwn.call(obj, key)) {
              if (iterator.call(context, obj[key], key, obj) === breaker) {
                return;
              }
            }
          }
        }
      };
      var _isFunction = function(obj) {
        return !!(obj && obj.constructor && obj.call && obj.apply);
      };
      var _extend = function(obj) {
        _each(slice.call(arguments, 1), function(source) {
          var prop;
          for (prop in source) {
            if (source[prop] !== void 0) {
              obj[prop] = source[prop];
            }
          }
        });
        return obj;
      };
      var _inArray = function(elem, arr, i) {
        var len;
        if (arr) {
          if (indexOf) {
            return indexOf.call(arr, elem, i);
          }
          len = arr.length;
          i = i ? i < 0 ? Math.max(0, len + i) : i : 0;
          for (; i < len; i++) {
            if (i in arr && arr[i] === elem) {
              return i;
            }
          }
        }
        return -1;
      };
      var class2type = {};
      _each("Boolean Number String Function Array Date RegExp Object".split(" "), function(name, i) {
        class2type["[object " + name + "]"] = name.toLowerCase();
      });
      var _type = function(obj) {
        return obj == null ? String(obj) : class2type[toString.call(obj)] || "object";
      };
      var _d = {};
      var optionsCache = {};
      function createOptions(options) {
        var object = optionsCache[options] = {};
        _each(options.split(/\s+/), function(flag) {
          object[flag] = true;
        });
        return object;
      }
      _d.Callbacks = function(options) {
        options = typeof options === "string" ? optionsCache[options] || createOptions(options) : _extend({}, options);
        var memory, fired, firing, firingStart, firingLength, firingIndex, list = [], stack = !options.once && [], fire = function(data) {
          memory = options.memory && data;
          fired = true;
          firingIndex = firingStart || 0;
          firingStart = 0;
          firingLength = list.length;
          firing = true;
          for (; list && firingIndex < firingLength; firingIndex++) {
            if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
              memory = false;
              break;
            }
          }
          firing = false;
          if (list) {
            if (stack) {
              if (stack.length) {
                fire(stack.shift());
              }
            } else if (memory) {
              list = [];
            } else {
              self.disable();
            }
          }
        }, self = {
          // Add a callback or a collection of callbacks to the list
          add: function() {
            if (list) {
              var start = list.length;
              (function add(args) {
                _each(args, function(arg) {
                  var type = _type(arg);
                  if (type === "function") {
                    if (!options.unique || !self.has(arg)) {
                      list.push(arg);
                    }
                  } else if (arg && arg.length && type !== "string") {
                    add(arg);
                  }
                });
              })(arguments);
              if (firing) {
                firingLength = list.length;
              } else if (memory) {
                firingStart = start;
                fire(memory);
              }
            }
            return this;
          },
          // Remove a callback from the list
          remove: function() {
            if (list) {
              _each(arguments, function(arg) {
                var index;
                while ((index = _inArray(arg, list, index)) > -1) {
                  list.splice(index, 1);
                  if (firing) {
                    if (index <= firingLength) {
                      firingLength--;
                    }
                    if (index <= firingIndex) {
                      firingIndex--;
                    }
                  }
                }
              });
            }
            return this;
          },
          // Control if a given callback is in the list
          has: function(fn) {
            return _inArray(fn, list) > -1;
          },
          // Remove all callbacks from the list
          empty: function() {
            list = [];
            return this;
          },
          // Have the list do nothing anymore
          disable: function() {
            list = stack = memory = void 0;
            return this;
          },
          // Is it disabled?
          disabled: function() {
            return !list;
          },
          // Lock the list in its current state
          lock: function() {
            stack = void 0;
            if (!memory) {
              self.disable();
            }
            return this;
          },
          // Is it locked?
          locked: function() {
            return !stack;
          },
          // Call all callbacks with the given context and arguments
          fireWith: function(context, args) {
            args = args || [];
            args = [context, args.slice ? args.slice() : args];
            if (list && (!fired || stack)) {
              if (firing) {
                stack.push(args);
              } else {
                fire(args);
              }
            }
            return this;
          },
          // Call all the callbacks with the given arguments
          fire: function() {
            self.fireWith(this, arguments);
            return this;
          },
          // To know if the callbacks have already been called at least once
          fired: function() {
            return !!fired;
          }
        };
        return self;
      };
      _d.Deferred = function(func) {
        var tuples = [
          // action, add listener, listener list, final state
          ["resolve", "done", _d.Callbacks("once memory"), "resolved"],
          ["reject", "fail", _d.Callbacks("once memory"), "rejected"],
          ["notify", "progress", _d.Callbacks("memory")]
        ], state = "pending", promise = {
          state: function() {
            return state;
          },
          always: function() {
            deferred.done(arguments).fail(arguments);
            return this;
          },
          then: function() {
            var fns = arguments;
            return _d.Deferred(function(newDefer) {
              _each(tuples, function(tuple, i) {
                var action = tuple[0], fn = fns[i];
                deferred[tuple[1]](
                  _isFunction(fn) ? function() {
                    var returned;
                    try {
                      returned = fn.apply(this, arguments);
                    } catch (e) {
                      newDefer.reject(e);
                      return;
                    }
                    if (returned && _isFunction(returned.promise)) {
                      returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);
                    } else {
                      newDefer[action !== "notify" ? "resolveWith" : action + "With"](this === deferred ? newDefer : this, [returned]);
                    }
                  } : newDefer[action]
                );
              });
              fns = null;
            }).promise();
          },
          // Get a promise for this deferred
          // If obj is provided, the promise aspect is added to the object
          promise: function(obj) {
            return obj != null ? _extend(obj, promise) : promise;
          }
        }, deferred = {};
        promise.pipe = promise.then;
        _each(tuples, function(tuple, i) {
          var list = tuple[2], stateString = tuple[3];
          promise[tuple[1]] = list.add;
          if (stateString) {
            list.add(function() {
              state = stateString;
            }, tuples[i ^ 1][2].disable, tuples[2][2].lock);
          }
          deferred[tuple[0]] = list.fire;
          deferred[tuple[0] + "With"] = list.fireWith;
        });
        promise.promise(deferred);
        if (func) {
          func.call(deferred, deferred);
        }
        return deferred;
      };
      _d.when = function(subordinate) {
        var i = 0, resolveValues = _type(subordinate) === "array" && arguments.length === 1 ? subordinate : slice.call(arguments), length = resolveValues.length, remaining = length !== 1 || subordinate && _isFunction(subordinate.promise) ? length : 0, deferred = remaining === 1 ? subordinate : _d.Deferred(), updateFunc = function(i2, contexts, values) {
          return function(value) {
            contexts[i2] = this;
            values[i2] = arguments.length > 1 ? slice.call(arguments) : value;
            if (values === progressValues) {
              deferred.notifyWith(contexts, values);
            } else if (!--remaining) {
              deferred.resolveWith(contexts, values);
            }
          };
        }, progressValues, progressContexts, resolveContexts;
        if (length > 1) {
          progressValues = new Array(length);
          progressContexts = new Array(length);
          resolveContexts = new Array(length);
          for (; i < length; i++) {
            if (resolveValues[i] && _isFunction(resolveValues[i].promise)) {
              resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues));
            } else {
              --remaining;
            }
          }
        }
        if (!remaining) {
          deferred.resolveWith(resolveContexts, resolveValues);
        }
        return deferred.promise();
      };
      if (typeof module !== "undefined" && module.exports) {
        module.exports = _d;
      } else if (typeof root._ !== "undefined") {
        root._.mixin(_d);
      } else {
        root._ = _d;
      }
    })(exports);
  }
});

// node_modules/react-intl-tel-input/dist/components/AllCountries.js
var require_AllCountries = __commonJS({
  "node_modules/react-intl-tel-input/dist/components/AllCountries.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var defaultCountriesData = [["Afghanistan (‫افغانستان‬‎)", "af", "93"], ["Albania (Shqipëri)", "al", "355"], ["Algeria (‫الجزائر‬‎)", "dz", "213"], ["American Samoa", "as", "1684"], ["Andorra", "ad", "376"], ["Angola", "ao", "244"], ["Anguilla", "ai", "1264"], ["Antigua and Barbuda", "ag", "1268"], ["Argentina", "ar", "54"], ["Armenia (Հայաստան)", "am", "374"], ["Aruba", "aw", "297"], ["Australia", "au", "61", 0], ["Austria (Österreich)", "at", "43"], ["Azerbaijan (Azərbaycan)", "az", "994"], ["Bahamas", "bs", "1242"], ["Bahrain (‫البحرين‬‎)", "bh", "973"], ["Bangladesh (বাংলাদেশ)", "bd", "880"], ["Barbados", "bb", "1246"], ["Belarus (Беларусь)", "by", "375"], ["Belgium (België)", "be", "32"], ["Belize", "bz", "501"], ["Benin (Bénin)", "bj", "229"], ["Bermuda", "bm", "1441"], ["Bhutan (འབྲུག)", "bt", "975"], ["Bolivia", "bo", "591"], ["Bosnia and Herzegovina (Босна и Херцеговина)", "ba", "387"], ["Botswana", "bw", "267"], ["Brazil (Brasil)", "br", "55"], ["British Indian Ocean Territory", "io", "246"], ["British Virgin Islands", "vg", "1284"], ["Brunei", "bn", "673"], ["Bulgaria (България)", "bg", "359"], ["Burkina Faso", "bf", "226"], ["Burundi (Uburundi)", "bi", "257"], ["Cambodia (កម្ពុជា)", "kh", "855"], ["Cameroon (Cameroun)", "cm", "237"], ["Canada", "ca", "1", 1, ["204", "226", "236", "249", "250", "289", "306", "343", "365", "367", "387", "403", "416", "418", "431", "437", "438", "450", "506", "514", "519", "548", "579", "581", "587", "604", "613", "639", "647", "672", "705", "709", "742", "778", "780", "782", "807", "819", "825", "867", "873", "902", "905"]], ["Cape Verde (Kabu Verdi)", "cv", "238"], ["Caribbean Netherlands", "bq", "599", 1], ["Cayman Islands", "ky", "1345"], ["Central African Republic (République centrafricaine)", "cf", "236"], ["Chad (Tchad)", "td", "235"], ["Chile", "cl", "56"], ["China (中国)", "cn", "86"], ["Christmas Island", "cx", "61", 2], ["Cocos (Keeling) Islands", "cc", "61", 1], ["Colombia", "co", "57"], ["Comoros (‫جزر القمر‬‎)", "km", "269"], ["Congo (DRC) (Jamhuri ya Kidemokrasia ya Kongo)", "cd", "243"], ["Congo (Republic) (Congo-Brazzaville)", "cg", "242"], ["Cook Islands", "ck", "682"], ["Costa Rica", "cr", "506"], ["Côte d’Ivoire", "ci", "225"], ["Croatia (Hrvatska)", "hr", "385"], ["Cuba", "cu", "53"], ["Curaçao", "cw", "599", 0], ["Cyprus (Κύπρος)", "cy", "357"], ["Czech Republic (Česká republika)", "cz", "420"], ["Denmark (Danmark)", "dk", "45"], ["Djibouti", "dj", "253"], ["Dominica", "dm", "1767"], ["Dominican Republic (República Dominicana)", "do", "1", 2, ["809", "829", "849"]], ["Ecuador", "ec", "593"], ["Egypt (‫مصر‬‎)", "eg", "20"], ["El Salvador", "sv", "503"], ["Equatorial Guinea (Guinea Ecuatorial)", "gq", "240"], ["Eritrea", "er", "291"], ["Estonia (Eesti)", "ee", "372"], ["Ethiopia", "et", "251"], ["Falkland Islands (Islas Malvinas)", "fk", "500"], ["Faroe Islands (Føroyar)", "fo", "298"], ["Fiji", "fj", "679"], ["Finland (Suomi)", "fi", "358", 0], ["France", "fr", "33"], ["French Guiana (Guyane française)", "gf", "594"], ["French Polynesia (Polynésie française)", "pf", "689"], ["Gabon", "ga", "241"], ["Gambia", "gm", "220"], ["Georgia (საქართველო)", "ge", "995"], ["Germany (Deutschland)", "de", "49"], ["Ghana (Gaana)", "gh", "233"], ["Gibraltar", "gi", "350"], ["Greece (Ελλάδα)", "gr", "30"], ["Greenland (Kalaallit Nunaat)", "gl", "299"], ["Grenada", "gd", "1473"], ["Guadeloupe", "gp", "590", 0], ["Guam", "gu", "1671"], ["Guatemala", "gt", "502"], ["Guernsey", "gg", "44", 1], ["Guinea (Guinée)", "gn", "224"], ["Guinea-Bissau (Guiné Bissau)", "gw", "245"], ["Guyana", "gy", "592"], ["Haiti", "ht", "509"], ["Honduras", "hn", "504"], ["Hong Kong (香港)", "hk", "852"], ["Hungary (Magyarország)", "hu", "36"], ["Iceland (Ísland)", "is", "354"], ["India (भारत)", "in", "91"], ["Indonesia", "id", "62"], ["Iran (‫ایران‬‎)", "ir", "98"], ["Iraq (‫العراق‬‎)", "iq", "964"], ["Ireland", "ie", "353"], ["Isle of Man", "im", "44", 2], ["Israel (‫ישראל‬‎)", "il", "972"], ["Italy (Italia)", "it", "39", 0], ["Jamaica", "jm", "1876"], ["Japan (日本)", "jp", "81"], ["Jersey", "je", "44", 3], ["Jordan (‫الأردن‬‎)", "jo", "962"], ["Kazakhstan (Казахстан)", "kz", "7", 1], ["Kenya", "ke", "254"], ["Kiribati", "ki", "686"], ["Kosovo", "xk", "383"], ["Kuwait (‫الكويت‬‎)", "kw", "965"], ["Kyrgyzstan (Кыргызстан)", "kg", "996"], ["Laos (ລາວ)", "la", "856"], ["Latvia (Latvija)", "lv", "371"], ["Lebanon (‫لبنان‬‎)", "lb", "961"], ["Lesotho", "ls", "266"], ["Liberia", "lr", "231"], ["Libya (‫ليبيا‬‎)", "ly", "218"], ["Liechtenstein", "li", "423"], ["Lithuania (Lietuva)", "lt", "370"], ["Luxembourg", "lu", "352"], ["Macau (澳門)", "mo", "853"], ["Macedonia (FYROM) (Македонија)", "mk", "389"], ["Madagascar (Madagasikara)", "mg", "261"], ["Malawi", "mw", "265"], ["Malaysia", "my", "60"], ["Maldives", "mv", "960"], ["Mali", "ml", "223"], ["Malta", "mt", "356"], ["Marshall Islands", "mh", "692"], ["Martinique", "mq", "596"], ["Mauritania (‫موريتانيا‬‎)", "mr", "222"], ["Mauritius (Moris)", "mu", "230"], ["Mayotte", "yt", "262", 1], ["Mexico (México)", "mx", "52"], ["Micronesia", "fm", "691"], ["Moldova (Republica Moldova)", "md", "373"], ["Monaco", "mc", "377"], ["Mongolia (Монгол)", "mn", "976"], ["Montenegro (Crna Gora)", "me", "382"], ["Montserrat", "ms", "1664"], ["Morocco (‫المغرب‬‎)", "ma", "212", 0], ["Mozambique (Moçambique)", "mz", "258"], ["Myanmar (Burma) (မြန်မာ)", "mm", "95"], ["Namibia (Namibië)", "na", "264"], ["Nauru", "nr", "674"], ["Nepal (नेपाल)", "np", "977"], ["Netherlands (Nederland)", "nl", "31"], ["New Caledonia (Nouvelle-Calédonie)", "nc", "687"], ["New Zealand", "nz", "64"], ["Nicaragua", "ni", "505"], ["Niger (Nijar)", "ne", "227"], ["Nigeria", "ng", "234"], ["Niue", "nu", "683"], ["Norfolk Island", "nf", "672"], ["North Korea (조선 민주주의 인민 공화국)", "kp", "850"], ["Northern Mariana Islands", "mp", "1670"], ["Norway (Norge)", "no", "47", 0], ["Oman (‫عُمان‬‎)", "om", "968"], ["Pakistan (‫پاکستان‬‎)", "pk", "92"], ["Palau", "pw", "680"], ["Palestine (‫فلسطين‬‎)", "ps", "970"], ["Panama (Panamá)", "pa", "507"], ["Papua New Guinea", "pg", "675"], ["Paraguay", "py", "595"], ["Peru (Perú)", "pe", "51"], ["Philippines", "ph", "63"], ["Poland (Polska)", "pl", "48"], ["Portugal", "pt", "351"], ["Puerto Rico", "pr", "1", 3, ["787", "939"]], ["Qatar (‫قطر‬‎)", "qa", "974"], ["Réunion (La Réunion)", "re", "262", 0], ["Romania (România)", "ro", "40"], ["Russia (Россия)", "ru", "7", 0], ["Rwanda", "rw", "250"], ["Saint Barthélemy (Saint-Barthélemy)", "bl", "590", 1], ["Saint Helena", "sh", "290"], ["Saint Kitts and Nevis", "kn", "1869"], ["Saint Lucia", "lc", "1758"], ["Saint Martin (Saint-Martin (partie française))", "mf", "590", 2], ["Saint Pierre and Miquelon (Saint-Pierre-et-Miquelon)", "pm", "508"], ["Saint Vincent and the Grenadines", "vc", "1784"], ["Samoa", "ws", "685"], ["San Marino", "sm", "378"], ["São Tomé and Príncipe (São Tomé e Príncipe)", "st", "239"], ["Saudi Arabia (‫المملكة العربية السعودية‬‎)", "sa", "966"], ["Senegal (Sénégal)", "sn", "221"], ["Serbia (Србија)", "rs", "381"], ["Seychelles", "sc", "248"], ["Sierra Leone", "sl", "232"], ["Singapore", "sg", "65"], ["Sint Maarten", "sx", "1721"], ["Slovakia (Slovensko)", "sk", "421"], ["Slovenia (Slovenija)", "si", "386"], ["Solomon Islands", "sb", "677"], ["Somalia (Soomaaliya)", "so", "252"], ["South Africa", "za", "27"], ["South Korea (대한민국)", "kr", "82"], ["South Sudan (‫جنوب السودان‬‎)", "ss", "211"], ["Spain (España)", "es", "34"], ["Sri Lanka (ශ්‍රී ලංකාව)", "lk", "94"], ["Sudan (‫السودان‬‎)", "sd", "249"], ["Suriname", "sr", "597"], ["Svalbard and Jan Mayen", "sj", "47", 1], ["Swaziland", "sz", "268"], ["Sweden (Sverige)", "se", "46"], ["Switzerland (Schweiz)", "ch", "41"], ["Syria (‫سوريا‬‎)", "sy", "963"], ["Taiwan (台灣)", "tw", "886"], ["Tajikistan", "tj", "992"], ["Tanzania", "tz", "255"], ["Thailand (ไทย)", "th", "66"], ["Timor-Leste", "tl", "670"], ["Togo", "tg", "228"], ["Tokelau", "tk", "690"], ["Tonga", "to", "676"], ["Trinidad and Tobago", "tt", "1868"], ["Tunisia (‫تونس‬‎)", "tn", "216"], ["Turkey (Türkiye)", "tr", "90"], ["Turkmenistan", "tm", "993"], ["Turks and Caicos Islands", "tc", "1649"], ["Tuvalu", "tv", "688"], ["U.S. Virgin Islands", "vi", "1340"], ["Uganda", "ug", "256"], ["Ukraine (Україна)", "ua", "380"], ["United Arab Emirates (‫الإمارات العربية المتحدة‬‎)", "ae", "971"], ["United Kingdom", "gb", "44", 0], ["United States", "us", "1", 0], ["Uruguay", "uy", "598"], ["Uzbekistan (Oʻzbekiston)", "uz", "998"], ["Vanuatu", "vu", "678"], ["Vatican City (Città del Vaticano)", "va", "39", 1], ["Venezuela", "ve", "58"], ["Vietnam (Việt Nam)", "vn", "84"], ["Wallis and Futuna", "wf", "681"], ["Western Sahara (‫الصحراء الغربية‬‎)", "eh", "212", 1], ["Yemen (‫اليمن‬‎)", "ye", "967"], ["Zambia", "zm", "260"], ["Zimbabwe", "zw", "263"], ["Åland Islands", "ax", "358", 1]];
    var countries;
    function _formatCountriesData(countriesData) {
      return countriesData.map(function(country) {
        return {
          name: country[0],
          iso2: country[1],
          dialCode: country[2],
          priority: country[3] || 0,
          areaCodes: country[4] || null
        };
      });
    }
    function initialize(externalCountriesList) {
      countries = _formatCountriesData(externalCountriesList || defaultCountriesData);
    }
    function getCountries() {
      if (!countries) {
        initialize();
      }
      return countries;
    }
    var AllCountries = {
      initialize,
      getCountries
    };
    var _default = AllCountries;
    exports.default = _default;
  }
});

// node_modules/react-intl-tel-input/dist/components/utils.js
var require_utils = __commonJS({
  "node_modules/react-intl-tel-input/dist/components/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _AllCountries = _interopRequireDefault(require_AllCountries());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _typeof(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    var _default = {
      arraysEqual: function arraysEqual(a, b) {
        if (a === b) {
          return true;
        }
        if (a === null || b === null) {
          return false;
        }
        if (a.length !== b.length) {
          return false;
        }
        for (var i = 0; i < a.length; ++i) {
          if (a[i] !== b[i]) {
            return false;
          }
        }
        return true;
      },
      shallowEquals: function shallowEquals(a, b) {
        if (a === b) {
          return true;
        }
        for (var key in a) {
          if (a[key] !== b[key]) {
            if (Array.isArray(a[key]) && Array.isArray(b[key])) {
              if (!this.arraysEqual(a[key], b[key])) {
                return false;
              }
            } else {
              return false;
            }
          }
        }
        for (var _key in b) {
          if (a.hasOwnProperty(_key) === false) {
            return false;
          }
        }
        return true;
      },
      trim: function trim(str) {
        var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
        if (!str) {
          return "";
        }
        return str.replace(rtrim, "");
      },
      isNumeric: function isNumeric(obj) {
        return obj - parseFloat(obj) >= 0;
      },
      retrieveLiIndex: function retrieveLiIndex(node) {
        if (!node) {
          return -1;
        }
        var children = node.parentNode.childNodes;
        var num = 0;
        for (var i = 0, max = children.length; i < max; i++) {
          if (children[i] === node) {
            return num;
          }
          if (children[i].nodeType === 1 && children[i].tagName.toLowerCase() === "li") {
            num += 1;
          }
        }
        return -1;
      },
      getNumeric: function getNumeric(s) {
        return s.replace(/\D/g, "");
      },
      startsWith: function startsWith(a, b) {
        return a.substr(0, b.length).toUpperCase() === b;
      },
      isWindow: function isWindow(obj) {
        return obj !== null && obj === obj.window;
      },
      getWindow: function getWindow(elem) {
        return this.isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView;
      },
      offset: function offset(elem) {
        var docElem = null;
        var win = null;
        var box = {
          top: 0,
          left: 0
        };
        var doc = elem && elem.ownerDocument;
        docElem = doc.documentElement;
        if (_typeof(elem.getBoundingClientRect) !== (true ? "undefined" : _typeof(void 0))) {
          box = elem.getBoundingClientRect();
        }
        win = this.getWindow(doc);
        return {
          top: box.top + win.pageYOffset - docElem.clientTop,
          left: box.left + win.pageXOffset - docElem.clientLeft
        };
      },
      getOuterHeight: function getOuterHeight(element) {
        return element.offsetHeight + parseFloat(window.getComputedStyle(element).getPropertyValue("margin-top")) + parseFloat(window.getComputedStyle(element).getPropertyValue("margin-bottom"));
      },
      getCountryData: function getCountryData(countries, countryCode, ignoreOnlyCountriesOption, allowFail, errorHandler) {
        var countryList = ignoreOnlyCountriesOption ? _AllCountries.default.getCountries() : countries;
        for (var i = 0; i < countryList.length; i++) {
          if (countryList[i].iso2 === countryCode) {
            return countryList[i];
          }
        }
        if (allowFail) {
          return null;
        }
        if (typeof errorHandler === "function") {
          errorHandler(countryCode);
        }
        return {};
      },
      findIndex: function findIndex(items, predicate) {
        var index = -1;
        items.some(function(item, i) {
          if (predicate(item)) {
            index = i;
            return true;
          }
        });
        return index;
      },
      getCursorPositionAfterFormating: function getCursorPositionAfterFormating(prevBeforeCursor, prev, next) {
        if (prev === next) {
          return prevBeforeCursor.length;
        }
        var cursorShift = 0;
        if (prev.length > next.length) {
          for (var i = 0, j = 0; i < prevBeforeCursor.length && j < next.length; i += 1) {
            if (prevBeforeCursor[i] !== next[j]) {
              if (isNaN(next[j]) && !isNaN(prevBeforeCursor[i])) {
                i -= 1;
                j += 1;
                cursorShift += 1;
              } else {
                cursorShift -= 1;
              }
            } else {
              j += 1;
            }
          }
        } else {
          for (var _i = 0, _j = 0; _i < prevBeforeCursor.length && _j < next.length; _j += 1) {
            if (prevBeforeCursor[_i] !== next[_j]) {
              if (isNaN(prevBeforeCursor[_i]) && !isNaN(next[_j])) {
                _j -= 1;
                _i += 1;
                cursorShift -= 1;
              } else {
                cursorShift += 1;
              }
            } else {
              _i += 1;
            }
          }
        }
        return prevBeforeCursor.length + cursorShift;
      }
    };
    exports.default = _default;
  }
});

// node_modules/react-intl-tel-input/dist/components/FlagBox.js
var require_FlagBox = __commonJS({
  "node_modules/react-intl-tel-input/dist/components/FlagBox.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _react = _interopRequireDefault(require_react());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var FlagBox = function FlagBox2(_ref) {
      var dialCode = _ref.dialCode, isoCode = _ref.isoCode, name = _ref.name, onMouseOver = _ref.onMouseOver, onFocus = _ref.onFocus, onClick = _ref.onClick, flagRef = _ref.flagRef, innerFlagRef = _ref.innerFlagRef, countryClass = _ref.countryClass;
      return _react.default.createElement("li", {
        className: countryClass,
        "data-dial-code": dialCode,
        "data-country-code": isoCode,
        onMouseOver,
        onFocus,
        onClick
      }, _react.default.createElement("div", {
        ref: flagRef,
        className: "flag-box"
      }, _react.default.createElement("div", {
        ref: innerFlagRef,
        className: "iti-flag ".concat(isoCode)
      })), _react.default.createElement("span", {
        className: "country-name"
      }, name), _react.default.createElement("span", {
        className: "dial-code"
      }, "+ ".concat(dialCode)));
    };
    FlagBox.defaultProps = {
      onFocus: function onFocus() {
      },
      onMouseOver: function onMouseOver() {
      },
      onClick: function onClick() {
      }
    };
    var _default = FlagBox;
    exports.default = _default;
    FlagBox.__docgenInfo = {
      "description": "",
      "methods": [],
      "displayName": "FlagBox",
      "props": {
        "onFocus": {
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "onMouseOver": {
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "onClick": {
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "dialCode": {
          "type": {
            "name": "string"
          },
          "required": true,
          "description": ""
        },
        "isoCode": {
          "type": {
            "name": "string"
          },
          "required": true,
          "description": ""
        },
        "name": {
          "type": {
            "name": "string"
          },
          "required": true,
          "description": ""
        },
        "flagRef": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "innerFlagRef": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "countryClass": {
          "type": {
            "name": "string"
          },
          "required": true,
          "description": ""
        }
      }
    };
  }
});

// node_modules/react-intl-tel-input/dist/components/CountryList.js
var require_CountryList = __commonJS({
  "node_modules/react-intl-tel-input/dist/components/CountryList.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _classnames = _interopRequireDefault(require_classnames());
    var _utils = _interopRequireDefault(require_utils());
    var _FlagBox = _interopRequireDefault(require_FlagBox());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      } else {
        var newObj = {};
        if (obj != null) {
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
              var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
              if (desc.get || desc.set) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
        }
        newObj.default = obj;
        return newObj;
      }
    }
    function _typeof(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self);
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var CountryList = function(_Component) {
      _inherits(CountryList2, _Component);
      function CountryList2() {
        var _getPrototypeOf2;
        var _this;
        _classCallCheck(this, CountryList2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CountryList2)).call.apply(_getPrototypeOf2, [this].concat(args)));
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "setDropdownPosition", function() {
          _this.listElement.classList.remove("hide");
          var inputTop = _this.props.inputTop;
          var windowTop = window.pageYOffset !== void 0 ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop;
          var windowHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
          var inputOuterHeight = _this.props.inputOuterHeight;
          var countryListOuterHeight = _utils.default.getOuterHeight(_this.listElement);
          var dropdownFitsBelow = inputTop + inputOuterHeight + countryListOuterHeight < windowTop + windowHeight;
          var dropdownFitsAbove = inputTop - countryListOuterHeight > windowTop;
          var cssTop = !dropdownFitsBelow && dropdownFitsAbove ? "-".concat(countryListOuterHeight - 1, "px") : "";
          _this.listElement.style.top = cssTop;
          _this.listElement.classList.remove("v-hide");
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "appendListItem", function(countries) {
          var isPreferred = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
          var preferredCountriesCount = _this.props.preferredCountries.length;
          return countries.map(function(country, index) {
            var actualIndex = isPreferred ? index : index + preferredCountriesCount;
            var countryClassObj = {
              country: true,
              highlight: _this.props.highlightedCountry === actualIndex,
              preferred: isPreferred
            };
            var countryClass = (0, _classnames.default)(countryClassObj);
            var onMouseOverOrFocus = _this.props.isMobile ? function() {
            } : _this.handleMouseOver;
            var keyPrefix = isPreferred ? "pref-" : "";
            return _react.default.createElement(_FlagBox.default, {
              key: "".concat(keyPrefix).concat(country.iso2),
              dialCode: country.dialCode,
              isoCode: country.iso2,
              name: country.name,
              onMouseOver: onMouseOverOrFocus,
              onClick: function onClick() {
                return _this.props.setFlag(country.iso2);
              },
              onFocus: onMouseOverOrFocus,
              flagRef: function flagRef(selectedFlag) {
                _this.selectedFlag = selectedFlag;
              },
              innerFlagRef: function innerFlagRef(selectedFlagInner) {
                _this.selectedFlagInner = selectedFlagInner;
              },
              countryClass
            });
          });
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleMouseOver", function(e) {
          if (e.currentTarget.getAttribute("class").indexOf("country") > -1) {
            var selectedIndex = _utils.default.retrieveLiIndex(e.currentTarget);
            _this.props.changeHighlightCountry(true, selectedIndex);
          }
        });
        return _this;
      }
      _createClass(CountryList2, [{
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate(nextProps) {
          var shouldUpdate = !_utils.default.shallowEquals(this.props, nextProps);
          if (shouldUpdate && nextProps.showDropdown) {
            this.listElement.classList.add("v-hide");
            this.setDropdownPosition();
          }
          return shouldUpdate;
        }
      }, {
        key: "render",
        value: function render() {
          var _this2 = this;
          var _this$props = this.props, preferredCountries = _this$props.preferredCountries, countries = _this$props.countries, showDropdown = _this$props.showDropdown;
          var className = (0, _classnames.default)("country-list", {
            hide: !showDropdown
          });
          var preferredOptions = this.appendListItem(preferredCountries, true);
          var allOptions = this.appendListItem(countries);
          var divider = _react.default.createElement("div", {
            className: "divider"
          });
          return _react.default.createElement("ul", {
            ref: function ref(listElement) {
              _this2.listElement = listElement;
            },
            className
          }, preferredOptions, preferredCountries.length > 0 ? divider : null, allOptions);
        }
      }]);
      return CountryList2;
    }(_react.Component);
    exports.default = CountryList;
    CountryList.__docgenInfo = {
      "description": "",
      "methods": [{
        "name": "setDropdownPosition",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }, {
        "name": "appendListItem",
        "docblock": null,
        "modifiers": [],
        "params": [{
          "name": "countries",
          "type": null
        }, {
          "name": "isPreferred",
          "type": null
        }],
        "returns": null
      }, {
        "name": "handleMouseOver",
        "docblock": null,
        "modifiers": [],
        "params": [{
          "name": "e",
          "type": null
        }],
        "returns": null
      }],
      "displayName": "CountryList",
      "props": {
        "setFlag": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "countries": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "object"
            }
          },
          "required": false,
          "description": ""
        },
        "inputTop": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": ""
        },
        "inputOuterHeight": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": ""
        },
        "preferredCountries": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "object"
            }
          },
          "required": false,
          "description": ""
        },
        "highlightedCountry": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": ""
        },
        "changeHighlightCountry": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "showDropdown": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "isMobile": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        }
      }
    };
  }
});

// node_modules/react-intl-tel-input/dist/components/RootModal.js
var require_RootModal = __commonJS({
  "node_modules/react-intl-tel-input/dist/components/RootModal.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _reactDom = _interopRequireDefault(require_react_dom());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      } else {
        var newObj = {};
        if (obj != null) {
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
              var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
              if (desc.get || desc.set) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
        }
        newObj.default = obj;
        return newObj;
      }
    }
    function _typeof(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self);
    }
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    var RootModal = function(_Component) {
      _inherits(RootModal2, _Component);
      function RootModal2(props) {
        var _this;
        _classCallCheck(this, RootModal2);
        _this = _possibleConstructorReturn(this, _getPrototypeOf(RootModal2).call(this, props));
        _this.modalTarget = document.createElement("div");
        _this.modalTarget.className = "intl-tel-input iti-container";
        return _this;
      }
      _createClass(RootModal2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          document.body.appendChild(this.modalTarget);
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          document.body.removeChild(this.modalTarget);
        }
      }, {
        key: "render",
        value: function render() {
          return _reactDom.default.createPortal(_react.default.createElement(_react.Fragment, null, this.props.children), this.modalTarget);
        }
      }]);
      return RootModal2;
    }(_react.Component);
    exports.default = RootModal;
    RootModal.__docgenInfo = {
      "description": "",
      "methods": [],
      "displayName": "RootModal",
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        }
      }
    };
  }
});

// node_modules/react-intl-tel-input/dist/components/FlagDropDown.js
var require_FlagDropDown = __commonJS({
  "node_modules/react-intl-tel-input/dist/components/FlagDropDown.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _classnames = _interopRequireDefault(require_classnames());
    var _CountryList = _interopRequireDefault(require_CountryList());
    var _RootModal = _interopRequireDefault(require_RootModal());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      } else {
        var newObj = {};
        if (obj != null) {
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
              var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
              if (desc.get || desc.set) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
        }
        newObj.default = obj;
        return newObj;
      }
    }
    function _typeof(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self);
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var FlagDropDown = function(_Component) {
      _inherits(FlagDropDown2, _Component);
      function FlagDropDown2() {
        var _getPrototypeOf2;
        var _this;
        _classCallCheck(this, FlagDropDown2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(FlagDropDown2)).call.apply(_getPrototypeOf2, [this].concat(args)));
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "genSelectedDialCode", function() {
          var _this$props = _this.props, separateDialCode = _this$props.separateDialCode, dialCode = _this$props.dialCode;
          return separateDialCode ? _react.default.createElement("div", {
            className: "selected-dial-code"
          }, dialCode) : null;
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "genArrow", function() {
          var _this$props2 = _this.props, allowDropdown = _this$props2.allowDropdown, showDropdown = _this$props2.showDropdown;
          var arrowClasses = (0, _classnames.default)("arrow", showDropdown ? "up" : "down");
          return allowDropdown ? _react.default.createElement("div", {
            className: arrowClasses
          }) : null;
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "genFlagClassName", function() {
          return (0, _classnames.default)("iti-flag", _defineProperty({}, _this.props.countryCode, !!_this.props.countryCode));
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "genCountryList", function() {
          var _this$props3 = _this.props, dropdownContainer = _this$props3.dropdownContainer, showDropdown = _this$props3.showDropdown, isMobile = _this$props3.isMobile, allowDropdown = _this$props3.allowDropdown, setFlag = _this$props3.setFlag, countries = _this$props3.countries, inputTop = _this$props3.inputTop, inputOuterHeight = _this$props3.inputOuterHeight, preferredCountries = _this$props3.preferredCountries, highlightedCountry = _this$props3.highlightedCountry, changeHighlightCountry = _this$props3.changeHighlightCountry;
          return _react.default.createElement(_CountryList.default, {
            ref: function ref(countryList) {
              _this.countryList = countryList;
            },
            dropdownContainer,
            isMobile,
            showDropdown: allowDropdown && showDropdown,
            setFlag,
            countries,
            inputTop,
            inputOuterHeight,
            preferredCountries,
            highlightedCountry,
            changeHighlightCountry
          });
        });
        return _this;
      }
      _createClass(FlagDropDown2, [{
        key: "render",
        value: function render() {
          var _this$props4 = this.props, refCallback = _this$props4.refCallback, allowDropdown = _this$props4.allowDropdown, clickSelectedFlag = _this$props4.clickSelectedFlag, handleSelectedFlagKeydown = _this$props4.handleSelectedFlagKeydown, titleTip = _this$props4.titleTip, dropdownContainer = _this$props4.dropdownContainer, showDropdown = _this$props4.showDropdown;
          return _react.default.createElement("div", {
            ref: refCallback,
            className: "flag-container"
          }, _react.default.createElement("div", {
            className: "selected-flag",
            tabIndex: allowDropdown ? "0" : "",
            onClick: clickSelectedFlag,
            onKeyDown: handleSelectedFlagKeydown,
            title: titleTip
          }, _react.default.createElement("div", {
            className: this.genFlagClassName()
          }), this.genSelectedDialCode(), this.genArrow()), dropdownContainer && showDropdown ? _react.default.createElement(_RootModal.default, null, this.genCountryList()) : this.genCountryList());
        }
      }]);
      return FlagDropDown2;
    }(_react.Component);
    exports.default = FlagDropDown;
    FlagDropDown.__docgenInfo = {
      "description": "",
      "methods": [{
        "name": "genSelectedDialCode",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }, {
        "name": "genArrow",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }, {
        "name": "genFlagClassName",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }, {
        "name": "genCountryList",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }],
      "displayName": "FlagDropDown",
      "props": {
        "allowDropdown": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "dropdownContainer": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "separateDialCode": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "dialCode": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "countryCode": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "showDropdown": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "clickSelectedFlag": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "handleSelectedFlagKeydown": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "isMobile": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "setFlag": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "countries": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "object"
            }
          },
          "required": false,
          "description": ""
        },
        "inputTop": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": ""
        },
        "inputOuterHeight": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": ""
        },
        "preferredCountries": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "object"
            }
          },
          "required": false,
          "description": ""
        },
        "highlightedCountry": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": ""
        },
        "changeHighlightCountry": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "titleTip": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "refCallback": {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": ""
        }
      }
    };
  }
});

// node_modules/react-intl-tel-input/dist/components/TelInput.js
var require_TelInput = __commonJS({
  "node_modules/react-intl-tel-input/dist/components/TelInput.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _react = _interopRequireWildcard(require_react());
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      } else {
        var newObj = {};
        if (obj != null) {
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
              var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
              if (desc.get || desc.set) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
        }
        newObj.default = obj;
        return newObj;
      }
    }
    function _typeof(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function _extends() {
      _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self);
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var TelInput = function(_Component) {
      _inherits(TelInput2, _Component);
      function TelInput2() {
        var _getPrototypeOf2;
        var _this;
        _classCallCheck(this, TelInput2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TelInput2)).call.apply(_getPrototypeOf2, [this].concat(args)));
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "state", {
          hasFocus: false
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "refHandler", function(element) {
          _this.tel = element;
          _this.props.refCallback(element);
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleBlur", function(e) {
          _this.setState({
            hasFocus: false
          });
          if (typeof _this.props.handleOnBlur === "function") {
            _this.props.handleOnBlur(e);
          }
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleFocus", function(e) {
          _this.setState({
            hasFocus: true
          });
          if (typeof _this.props.handleOnFocus === "function") {
            _this.props.handleOnFocus(e);
          }
        });
        return _this;
      }
      _createClass(TelInput2, [{
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
          if (this.state.hasFocus) {
            this.tel.setSelectionRange(this.props.cursorPosition, this.props.cursorPosition);
          }
        }
      }, {
        key: "render",
        value: function render() {
          return _react.default.createElement("input", _extends({}, this.props.inputProps, {
            ref: this.refHandler,
            type: "tel",
            autoComplete: this.props.autoComplete,
            className: this.props.className,
            disabled: this.props.disabled,
            readOnly: this.props.readonly,
            name: this.props.fieldName,
            id: this.props.fieldId,
            value: this.props.value,
            placeholder: this.props.placeholder,
            onChange: this.props.handleInputChange,
            onBlur: this.handleBlur,
            onFocus: this.handleFocus,
            autoFocus: this.props.autoFocus
          }));
        }
      }]);
      return TelInput2;
    }(_react.Component);
    exports.default = TelInput;
    TelInput.__docgenInfo = {
      "description": "",
      "methods": [{
        "name": "refHandler",
        "docblock": null,
        "modifiers": [],
        "params": [{
          "name": "element",
          "type": null
        }],
        "returns": null
      }, {
        "name": "handleBlur",
        "docblock": null,
        "modifiers": [],
        "params": [{
          "name": "e",
          "type": null
        }],
        "returns": null
      }, {
        "name": "handleFocus",
        "docblock": null,
        "modifiers": [],
        "params": [{
          "name": "e",
          "type": null
        }],
        "returns": null
      }],
      "displayName": "TelInput",
      "props": {
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "readonly": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "fieldName": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "fieldId": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "value": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "placeholder": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "handleInputChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "handleOnBlur": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "handleOnFocus": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "autoFocus": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "autoComplete": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "inputProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": ""
        },
        "refCallback": {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": ""
        },
        "cursorPosition": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": ""
        }
      }
    };
  }
});

// node_modules/react-intl-tel-input/dist/components/constants.js
var require_constants = __commonJS({
  "node_modules/react-intl-tel-input/dist/components/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.KEYS = void 0;
    var KEYS = {
      UP: 38,
      DOWN: 40,
      ENTER: 13,
      ESC: 27,
      PLUS: 43,
      A: 65,
      Z: 90,
      SPACE: 32,
      TAB: 9
    };
    exports.KEYS = KEYS;
  }
});

// node_modules/react-intl-tel-input/dist/components/IntlTelInput.js
var require_IntlTelInput = __commonJS({
  "node_modules/react-intl-tel-input/dist/components/IntlTelInput.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _classnames = _interopRequireDefault(require_classnames());
    var _underscore = _interopRequireDefault(require_underscore_deferred());
    var _AllCountries = _interopRequireDefault(require_AllCountries());
    var _FlagDropDown = _interopRequireDefault(require_FlagDropDown());
    var _TelInput = _interopRequireDefault(require_TelInput());
    var _utils = _interopRequireDefault(require_utils());
    var _constants = require_constants();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      } else {
        var newObj = {};
        if (obj != null) {
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
              var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
              if (desc.get || desc.set) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
        }
        newObj.default = obj;
        return newObj;
      }
    }
    function _typeof(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self);
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var mobileUserAgentRegexp = /Android.+Mobile|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i;
    var IntlTelInput = function(_Component) {
      _inherits(IntlTelInput2, _Component);
      _createClass(IntlTelInput2, null, [{
        key: "getDerivedStateFromProps",
        value: function getDerivedStateFromProps(nextProps, prevState) {
          var newState = null;
          if (typeof nextProps.value !== "undefined" && prevState.value !== nextProps.value) {
            newState = {
              value: nextProps.value
            };
          }
          if (prevState.disabled !== nextProps.disabled) {
            newState = {
              disabled: nextProps.disabled
            };
          }
          return newState;
        }
      }]);
      function IntlTelInput2(_props) {
        var _this;
        _classCallCheck(this, IntlTelInput2);
        _this = _possibleConstructorReturn(this, _getPrototypeOf(IntlTelInput2).call(this, _props));
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "updateFlagOnDefaultCountryChange", function(countryCode) {
          _this.setFlag(countryCode, false);
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getTempCountry", function(countryCode) {
          if (countryCode === "auto") {
            return "auto";
          }
          var countryData = _utils.default.getCountryData(_this.countries, countryCode);
          if (!countryData.iso2) {
            if (_this.props.preferredCountries.length > 0) {
              countryData = _utils.default.getCountryData(_this.countries, _this.props.preferredCountries[0]);
            } else {
              countryData = _AllCountries.default.getCountries()[0];
            }
          }
          return countryData.iso2;
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "setNumber", function(number, preventFormat) {
          _this.updateFlagFromNumber(number);
          _this.updateValFromNumber(number, !preventFormat);
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "setFlagDropdownRef", function(ref) {
          _this.flagDropDown = ref;
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "setTelRef", function(ref) {
          _this.tel = ref;
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "setFlag", function(countryCode, isInit) {
          var prevCountry = _this.selectedCountryData && _this.selectedCountryData.iso2 ? _this.selectedCountryData : {};
          _this.selectedCountryData = countryCode ? _utils.default.getCountryData(_this.countries, countryCode, false, false, _this.props.noCountryDataHandler) : {};
          if (_this.selectedCountryData.iso2) {
            _this.defaultCountry = _this.selectedCountryData.iso2;
          }
          var title = countryCode ? "".concat(_this.selectedCountryData.name, ": +").concat(_this.selectedCountryData.dialCode) : "Unknown";
          var dialCode = _this.state.dialCode;
          if (_this.props.separateDialCode) {
            dialCode = _this.selectedCountryData.dialCode ? "+".concat(_this.selectedCountryData.dialCode) : "";
            if (prevCountry.dialCode) {
              delete _this.wrapperClass["iti-sdc-".concat(prevCountry.dialCode.length + 1)];
            }
            if (dialCode) {
              _this.wrapperClass["iti-sdc-".concat(dialCode.length)] = true;
            }
          }
          var selectedIndex = 0;
          if (countryCode && countryCode !== "auto") {
            selectedIndex = _utils.default.findIndex(_this.preferredCountries, function(country) {
              return country.iso2 === countryCode;
            });
            if (selectedIndex === -1) {
              selectedIndex = _utils.default.findIndex(_this.countries, function(country) {
                return country.iso2 === countryCode;
              });
              if (selectedIndex === -1)
                selectedIndex = 0;
              selectedIndex += _this.preferredCountries.length;
            }
          }
          if (_this.tel && _this.state.showDropdown) {
            _this.tel.focus();
          }
          var newNumber = _this.updateDialCode(_this.selectedCountryData.dialCode, !isInit);
          _this.setState({
            value: newNumber,
            showDropdown: false,
            highlightedCountry: selectedIndex,
            countryCode,
            title,
            dialCode
          }, function() {
            _this.updatePlaceholder(_this.props);
            _this.wrapperClass.active = false;
            if (!isInit && prevCountry.iso2 !== countryCode && typeof _this.props.onSelectFlag === "function") {
              var currentNumber = _this.state.value;
              var fullNumber = _this.formatFullNumber(currentNumber);
              var isValid = _this.isValidNumber(fullNumber);
              _this.props.onSelectFlag(currentNumber, _this.selectedCountryData, fullNumber, isValid);
            }
          });
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getExtension", function(number) {
          if (window.intlTelInputUtils) {
            return window.intlTelInputUtils.getExtension(_this.getFullNumber(number), _this.selectedCountryData.iso2);
          }
          return "";
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getNumber", function(number, format) {
          if (window.intlTelInputUtils) {
            return window.intlTelInputUtils.formatNumber(_this.getFullNumber(number), _this.selectedCountryData.iso2, format);
          }
          return "";
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getFullNumber", function(number) {
          var prefix = _this.props.separateDialCode ? "+".concat(_this.selectedCountryData.dialCode) : "";
          return prefix + number;
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getDialCode", function(number) {
          var dialCode = "";
          if (number.charAt(0) === "+") {
            var numericChars = "";
            for (var i = 0, max = number.length; i < max; i++) {
              var c = number.charAt(i);
              if (_utils.default.isNumeric(c)) {
                numericChars += c;
                if (_this.countryCodes[numericChars]) {
                  dialCode = number.substr(0, i + 1);
                }
                if (numericChars.length === 4) {
                  break;
                }
              }
            }
          }
          return dialCode;
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "isUnknownNanp", function(number, dialCode) {
          return dialCode === "+1" && _utils.default.getNumeric(number).length >= 4;
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "addCountryCode", function(countryCodes, iso2, dialCode, priority) {
          if (!(dialCode in countryCodes)) {
            countryCodes[dialCode] = [];
          }
          var index = priority || 0;
          countryCodes[dialCode][index] = iso2;
          return countryCodes;
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "processAllCountries", function() {
          if (_this.props.onlyCountries.length) {
            _this.filterCountries(_this.props.onlyCountries, function(inArray) {
              return inArray !== -1;
            });
          } else if (_this.props.excludeCountries.length) {
            _this.filterCountries(_this.props.excludeCountries, function(inArray) {
              return inArray === -1;
            });
          } else {
            _this.countries = _AllCountries.default.getCountries();
          }
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "processCountryCodes", function() {
          _this.countryCodes = {};
          for (var i = 0; i < _this.countries.length; i++) {
            var c = _this.countries[i];
            _this.addCountryCode(_this.countryCodes, c.iso2, c.dialCode, c.priority);
            if (c.areaCodes) {
              for (var j = 0; j < c.areaCodes.length; j++) {
                _this.addCountryCode(_this.countryCodes, c.iso2, c.dialCode + c.areaCodes[j]);
              }
            }
          }
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "processPreferredCountries", function() {
          _this.preferredCountries = [];
          for (var i = 0, max = _this.props.preferredCountries.length; i < max; i++) {
            var countryCode = _this.props.preferredCountries[i].toLowerCase();
            var countryData = _utils.default.getCountryData(_this.countries, countryCode, true);
            if (countryData) {
              _this.preferredCountries.push(countryData);
            }
          }
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "setInitialState", function() {
          var val = _this.props.value || _this.props.defaultValue || "";
          if (_this.getDialCode(val)) {
            _this.updateFlagFromNumber(val, true);
          } else if (_this.tempCountry !== "auto") {
            if (_this.tempCountry) {
              _this.setFlag(_this.tempCountry, true);
            } else {
              _this.defaultCountry = _this.preferredCountries.length ? _this.preferredCountries[0].iso2 : _this.countries[0].iso2;
              if (!val) {
                _this.setFlag(_this.defaultCountry, true);
              }
            }
            if (!val && !_this.nationalMode && !_this.autoHideDialCode && !_this.props.separateDialCode) {
              _this.setState({
                value: "+".concat(_this.selectedCountryData.dialCode)
              });
            }
          }
          var doNotify = true;
          if (val) {
            _this.updateValFromNumber(val, _this.props.formatOnInit, doNotify);
          }
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "initRequests", function() {
          import("./libphonenumber-ZHMLYE4I.js").then(function() {
            _this.loadUtils();
            _this.utilsScriptDeferred.resolve();
          }).catch(function() {
            return "An error occurred while loading the component";
          });
          if (_this.tempCountry === "auto") {
            _this.loadAutoCountry();
          } else {
            _this.autoCountryDeferred.resolve();
          }
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "loadCountryFromLocalStorage", function() {
          try {
            return window.localStorage !== void 0 ? window.localStorage.getItem("itiAutoCountry") : "";
          } catch (e) {
            return "";
          }
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "loadAutoCountry", function() {
          var lsAutoCountry = _this.loadCountryFromLocalStorage();
          if (lsAutoCountry) {
            _this.autoCountry = lsAutoCountry;
          }
          if (_this.autoCountry) {
            _this.autoCountryLoaded();
          } else if (!_this.startedLoadingAutoCountry) {
            _this.startedLoadingAutoCountry = true;
            if (typeof _this.props.geoIpLookup === "function") {
              _this.props.geoIpLookup(function(countryCode) {
                _this.autoCountry = countryCode.toLowerCase();
                if (window.localStorage !== void 0) {
                  window.localStorage.setItem("itiAutoCountry", _this.autoCountry);
                }
                _this.autoCountryLoaded();
              });
            }
          }
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "cap", function(number) {
          var max = _this.tel ? _this.tel.getAttribute("maxlength") : number;
          return max && number.length > max ? number.substr(0, max) : number;
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "removeEmptyDialCode", function() {
          var value = _this.state.value;
          var startsPlus = value.charAt(0) === "+";
          if (startsPlus) {
            var numeric = _utils.default.getNumeric(value);
            if (!numeric || _this.selectedCountryData.dialCode === numeric) {
              _this.setState({
                value: ""
              });
            }
          }
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleUpDownKey", function(key) {
          var current = _this.flagDropDown.querySelectorAll(".highlight")[0];
          var prevElement = current ? current.previousElementSibling : void 0;
          var nextElement = current ? current.nextElementSibling : void 0;
          var next = key === _constants.KEYS.UP ? prevElement : nextElement;
          if (next) {
            if (next.getAttribute("class").indexOf("divider") > -1) {
              next = key === _constants.KEYS.UP ? next.previousElementSibling : next.nextElementSibling;
            }
            _this.scrollTo(next);
            var selectedIndex = _utils.default.retrieveLiIndex(next);
            _this.setState({
              showDropdown: true,
              highlightedCountry: selectedIndex
            });
          }
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleEnterKey", function() {
          var current = _this.flagDropDown.querySelectorAll(".highlight")[0];
          if (current) {
            var selectedIndex = _utils.default.retrieveLiIndex(current);
            var countryCode = current.getAttribute("data-country-code");
            _this.setState({
              showDropdown: false,
              highlightedCountry: selectedIndex,
              countryCode
            }, function() {
              _this.setFlag(_this.state.countryCode);
              _this.unbindDocumentClick();
            });
          }
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "searchForCountry", function(query) {
          for (var i = 0, max = _this.countries.length; i < max; i++) {
            if (_utils.default.startsWith(_this.countries[i].name, query)) {
              var listItem = _this.flagDropDown.querySelector('.country-list [data-country-code="'.concat(_this.countries[i].iso2, '"]:not(.preferred)'));
              var selectedIndex = _utils.default.retrieveLiIndex(listItem);
              _this.setState({
                showDropdown: true,
                highlightedCountry: selectedIndex
              });
              _this.scrollTo(listItem, true);
              break;
            }
          }
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "formatNumber", function(number) {
          if (window.intlTelInputUtils && _this.selectedCountryData) {
            var format = window.intlTelInputUtils.numberFormat.INTERNATIONAL;
            if (!_this.props.separateDialCode && _this.nationalMode || number.charAt(0) !== "+") {
              format = window.intlTelInputUtils.numberFormat.NATIONAL;
            }
            number = window.intlTelInputUtils.formatNumber(number, _this.selectedCountryData.iso2, format);
          }
          return number;
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "updateValFromNumber", function(number, doFormat) {
          var doNotify = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
          if (doFormat && window.intlTelInputUtils && _this.selectedCountryData) {
            var format = !_this.props.separateDialCode && (_this.nationalMode || number.charAt(0) !== "+") ? window.intlTelInputUtils.numberFormat.NATIONAL : window.intlTelInputUtils.numberFormat.INTERNATIONAL;
            number = window.intlTelInputUtils.formatNumber(number, _this.selectedCountryData.iso2, format);
          }
          number = _this.beforeSetNumber(number);
          _this.setState({
            showDropdown: false,
            value: number
          }, function() {
            if (doNotify) {
              _this.notifyPhoneNumberChange(number);
            }
            _this.unbindDocumentClick();
          });
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "updateFlagFromNumber", function(number, isInit) {
          if (number && _this.nationalMode && _this.selectedCountryData && _this.selectedCountryData.dialCode === "1" && number.charAt(0) !== "+") {
            if (number.charAt(0) !== "1") {
              number = "1".concat(number);
            }
            number = "+".concat(number);
          }
          var dialCode = _this.getDialCode(number);
          var countryCode = null;
          if (dialCode) {
            var countryCodes = _this.countryCodes[_utils.default.getNumeric(dialCode)];
            var alreadySelected = _this.selectedCountryData && countryCodes.indexOf(_this.selectedCountryData.iso2) !== -1;
            if (!alreadySelected || _this.isUnknownNanp(number, dialCode)) {
              for (var j = 0; j < countryCodes.length; j++) {
                if (countryCodes[j]) {
                  countryCode = countryCodes[j];
                  break;
                }
              }
            }
          } else if (number.charAt(0) === "+" && _utils.default.getNumeric(number).length) {
            countryCode = null;
          }
          if (countryCode !== null) {
            _this.setFlag(countryCode, isInit);
          }
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "filterCountries", function(countryArray, processFunc) {
          var i;
          for (i = 0; i < countryArray.length; i++) {
            countryArray[i] = countryArray[i].toLowerCase();
          }
          _this.countries = [];
          for (i = 0; i < _AllCountries.default.getCountries().length; i++) {
            if (processFunc(countryArray.indexOf(_AllCountries.default.getCountries()[i].iso2))) {
              _this.countries.push(_AllCountries.default.getCountries()[i]);
            }
          }
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "processCountryData", function() {
          _AllCountries.default.initialize(_this.props.countriesData);
          _this.processAllCountries.call(_assertThisInitialized(_assertThisInitialized(_this)));
          _this.processCountryCodes.call(_assertThisInitialized(_assertThisInitialized(_this)));
          _this.processPreferredCountries.call(_assertThisInitialized(_assertThisInitialized(_this)));
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleOnBlur", function(e) {
          _this.removeEmptyDialCode();
          if (typeof _this.props.onPhoneNumberBlur === "function") {
            var value = _this.state.value;
            var fullNumber = _this.formatFullNumber(value);
            var isValid = _this.isValidNumber(fullNumber);
            _this.props.onPhoneNumberBlur(isValid, value, _this.selectedCountryData, fullNumber, _this.getExtension(value), e);
          }
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleOnFocus", function(e) {
          if (typeof _this.props.onPhoneNumberFocus === "function") {
            var value = _this.state.value;
            var fullNumber = _this.formatFullNumber(value);
            var isValid = _this.isValidNumber(fullNumber);
            _this.props.onPhoneNumberFocus(isValid, value, _this.selectedCountryData, fullNumber, _this.getExtension(value), e);
          }
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "bindDocumentClick", function() {
          _this.isOpening = true;
          document.querySelector("html").addEventListener("click", _this.handleDocumentClick);
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "unbindDocumentClick", function() {
          document.querySelector("html").removeEventListener("click", _this.handleDocumentClick);
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "clickSelectedFlag", function(e) {
          var _this$props = _this.props, allowDropdown = _this$props.allowDropdown, onFlagClick = _this$props.onFlagClick;
          var _this$state = _this.state, showDropdown = _this$state.showDropdown, disabled = _this$state.disabled, readonly = _this$state.readonly;
          if (!showDropdown && !disabled && !readonly && allowDropdown) {
            _this.setState({
              showDropdown: true,
              offsetTop: _utils.default.offset(_this.tel).top,
              outerHeight: _utils.default.getOuterHeight(_this.tel)
            }, function() {
              var highlightItem = _this.flagDropDown.querySelector(".highlight");
              if (highlightItem) {
                _this.scrollTo(highlightItem, true);
              }
            });
          } else if (showDropdown) {
            _this.toggleDropdown(false);
          }
          if (typeof onFlagClick === "function") {
            onFlagClick(e);
          }
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "updatePlaceholder", function() {
          var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _this.props;
          if (window.intlTelInputUtils && props.autoPlaceholder && _this.selectedCountryData) {
            var numberType = window.intlTelInputUtils.numberType[props.numberType];
            var placeholder = _this.selectedCountryData.iso2 ? window.intlTelInputUtils.getExampleNumber(_this.selectedCountryData.iso2, _this.nationalMode, numberType) : "";
            placeholder = _this.beforeSetNumber(placeholder, props);
            if (typeof props.customPlaceholder === "function") {
              placeholder = props.customPlaceholder(placeholder, _this.selectedCountryData);
            }
            _this.setState({
              placeholder
            });
          }
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "toggleDropdown", function(status) {
          _this.setState({
            showDropdown: !!status
          }, function() {
            if (!_this.state.showDropdown) {
              _this.unbindDocumentClick();
            }
          });
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "scrollTo", function(element, middle) {
          try {
            var container = _this.flagDropDown.querySelector(".country-list");
            var containerHeight = parseFloat(window.getComputedStyle(container).getPropertyValue("height"));
            var containerTop = _utils.default.offset(container).top;
            var containerBottom = containerTop + containerHeight;
            var elementHeight = _utils.default.getOuterHeight(element);
            var elementTop = _utils.default.offset(element).top;
            var elementBottom = elementTop + elementHeight;
            var middleOffset = containerHeight / 2 - elementHeight / 2;
            var newScrollTop = elementTop - containerTop + container.scrollTop;
            if (elementTop < containerTop) {
              if (middle) {
                newScrollTop -= middleOffset;
              }
              container.scrollTop = newScrollTop;
            } else if (elementBottom > containerBottom) {
              if (middle) {
                newScrollTop += middleOffset;
              }
              var heightDifference = containerHeight - elementHeight;
              container.scrollTop = newScrollTop - heightDifference;
            }
          } catch (err) {
          }
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "updateDialCode", function(newDialCode, hasSelectedListItem) {
          var currentNumber = _this.state.value;
          if (!newDialCode) {
            return currentNumber;
          }
          var newNumber = currentNumber;
          newDialCode = "+".concat(newDialCode);
          if (currentNumber.charAt(0) === "+") {
            var prevDialCode = _this.getDialCode(currentNumber);
            if (prevDialCode) {
              newNumber = currentNumber.replace(prevDialCode, newDialCode);
            } else {
              newNumber = newDialCode;
            }
          } else if (_this.nationalMode || _this.props.separateDialCode) {
          } else if (currentNumber) {
            newNumber = newDialCode + currentNumber;
          } else if (hasSelectedListItem || !_this.autoHideDialCode) {
            newNumber = newDialCode;
          }
          if (newNumber !== currentNumber) {
            _this.notifyPhoneNumberChange(newNumber);
          }
          return newNumber;
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "generateMarkup", function() {
          _this.wrapperClass["separate-dial-code"] = _this.props.separateDialCode;
          if (_this.isMobile && _this.props.useMobileFullscreenDropdown) {
            document.querySelector("body").classList.add("iti-mobile");
            _this.dropdownContainer = "body";
            window.addEventListener("scroll", _this.handleWindowScroll);
          }
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleSelectedFlagKeydown", function(e) {
          if (!_this.state.showDropdown && (e.which === _constants.KEYS.UP || e.which === _constants.KEYS.DOWN || e.which === _constants.KEYS.SPACE || e.which === _constants.KEYS.ENTER)) {
            e.preventDefault();
            e.stopPropagation();
            _this.toggleDropdown(true);
          }
          if (e.which === _constants.KEYS.TAB) {
            _this.toggleDropdown(false);
          }
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "isValidNumber", function(number) {
          var val = _utils.default.trim(number);
          var countryCode = _this.nationalMode || _this.props.separateDialCode ? _this.selectedCountryData.iso2 : "";
          if (window.intlTelInputUtils) {
            return window.intlTelInputUtils.isValidNumber(val, countryCode);
          }
          return false;
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "formatFullNumber", function(number) {
          return window.intlTelInputUtils ? _this.getNumber(number, window.intlTelInputUtils.numberFormat.INTERNATIONAL) : number;
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "notifyPhoneNumberChange", function(newNumber) {
          if (typeof _this.props.onPhoneNumberChange === "function") {
            var fullNumber = _this.formatFullNumber(newNumber);
            var isValid = _this.isValidNumber(fullNumber);
            _this.props.onPhoneNumberChange(isValid, newNumber, _this.selectedCountryData, fullNumber, _this.getExtension(newNumber));
          }
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "beforeSetNumber", function(number) {
          var props = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _this.props;
          if (props.separateDialCode) {
            var dialCode = _this.getDialCode(number);
            if (dialCode) {
              if (_this.selectedCountryData.areaCodes !== null) {
                dialCode = "+".concat(_this.selectedCountryData.dialCode);
              }
              var start = number[dialCode.length] === " " || number[dialCode.length] === "-" ? dialCode.length + 1 : dialCode.length;
              number = number.substr(start);
            }
          }
          return _this.cap(number);
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleWindowScroll", function() {
          _this.setState({
            showDropdown: false
          }, function() {
            window.removeEventListener("scroll", _this.handleWindowScroll);
          });
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleDocumentKeyDown", function(e) {
          var queryTimer;
          e.preventDefault();
          if (e.which === _constants.KEYS.UP || e.which === _constants.KEYS.DOWN) {
            _this.handleUpDownKey(e.which);
          } else if (e.which === _constants.KEYS.ENTER) {
            _this.handleEnterKey();
          } else if (e.which === _constants.KEYS.ESC) {
            _this.setState({
              showDropdown: false
            });
          } else if (e.which >= _constants.KEYS.A && e.which <= _constants.KEYS.Z || e.which === _constants.KEYS.SPACE) {
            if (queryTimer) {
              clearTimeout(queryTimer);
            }
            if (!_this.query) {
              _this.query = "";
            }
            _this.query += String.fromCharCode(e.which);
            _this.searchForCountry(_this.query);
            queryTimer = setTimeout(function() {
              _this.query = "";
            }, 1e3);
          }
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleDocumentClick", function(e) {
          var targetClass = e.target.getAttribute("class");
          if (targetClass === null || targetClass && targetClass.indexOf("country") === -1 && targetClass.indexOf("selected-flag") === -1 && targetClass.indexOf("iti-flag") === -1 && targetClass.indexOf("iti-arrow") === -1) {
            _this.isOpening = false;
          }
          if (!_this.isOpening) {
            _this.toggleDropdown(false);
          }
          _this.isOpening = false;
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleInputChange", function(e) {
          var cursorPosition = e.target.selectionStart;
          var previousValue = e.target.value;
          var priorValue = _this.state.value;
          var previousStringBeforeCursor = previousValue === "" ? previousValue : previousValue.substring(0, cursorPosition);
          var formattedValue = previousValue.length < priorValue.length ? previousValue : _this.formatNumber(e.target.value);
          var value = _this.props.format ? formattedValue : e.target.value;
          cursorPosition = _utils.default.getCursorPositionAfterFormating(previousStringBeforeCursor, previousValue, value);
          if (_this.props.value !== void 0) {
            _this.setState({
              cursorPosition
            }, function() {
              _this.updateFlagFromNumber(value);
              _this.notifyPhoneNumberChange(value);
            });
          } else {
            _this.setState({
              value,
              cursorPosition
            }, function() {
              _this.updateFlagFromNumber(value);
              _this.notifyPhoneNumberChange(value);
            });
          }
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "changeHighlightCountry", function(showDropdown, selectedIndex) {
          _this.setState({
            showDropdown,
            highlightedCountry: selectedIndex
          });
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "loadUtils", function() {
          if (window.intlTelInputUtils) {
            _this.utilsScriptDeferred.resolve();
          }
        });
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "autoCountryLoaded", function() {
          if (_this.tempCountry === "auto") {
            _this.tempCountry = _this.autoCountry;
            _this.autoCountryDeferred.resolve();
          }
        });
        _this.wrapperClass = {};
        _this.autoCountry = "";
        _this.tempCountry = "";
        _this.startedLoadingAutoCountry = false;
        _this.deferreds = [];
        _this.autoCountryDeferred = new _underscore.default.Deferred();
        _this.utilsScriptDeferred = new _underscore.default.Deferred();
        _this.isOpening = false;
        _this.isMobile = typeof navigator !== "undefined" && mobileUserAgentRegexp.test(navigator.userAgent);
        _this.preferredCountries = [];
        _this.countries = [];
        _this.countryCodes = {};
        _this.windowLoaded = false;
        _this.query = "";
        _this.selectedCountryData = {};
        _this.state = {
          showDropdown: false,
          highlightedCountry: 0,
          value: _props.value || _props.defaultValue,
          disabled: _props.disabled,
          readonly: false,
          offsetTop: 0,
          outerHeight: 0,
          placeholder: "",
          title: "",
          countryCode: "us",
          dialCode: "",
          cursorPosition: (_props.value || _props.defaultValue).length
        };
        return _this;
      }
      _createClass(IntlTelInput2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          var _this2 = this;
          this.autoHideDialCode = this.props.autoHideDialCode;
          this.allowDropdown = this.props.allowDropdown;
          this.nationalMode = this.props.nationalMode;
          this.dropdownContainer = "";
          if (this.nationalMode) {
            this.autoHideDialCode = false;
          }
          if (this.props.separateDialCode) {
            this.autoHideDialCode = false;
            this.nationalMode = false;
            this.allowDropdown = true;
          }
          this.processCountryData.call(this);
          this.tempCountry = this.getTempCountry(this.props.defaultCountry);
          if (document.readyState === "complete") {
            this.windowLoaded = true;
          } else {
            window.addEventListener("load", function() {
              _this2.windowLoaded = true;
            });
          }
          this.generateMarkup();
          this.setInitialState();
          this.initRequests();
          this.deferreds.push(this.autoCountryDeferred.promise());
          this.deferreds.push(this.utilsScriptDeferred.promise());
          _underscore.default.when(this.deferreds).done(function() {
            _this2.setInitialState();
          });
          document.addEventListener("keydown", this.handleDocumentKeyDown);
        }
      }, {
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate(nextProps, nextState) {
          if (nextState.showDropdown) {
            document.addEventListener("keydown", this.handleDocumentKeyDown);
            this.bindDocumentClick();
          } else {
            document.removeEventListener("keydown", this.handleDocumentKeyDown);
            this.unbindDocumentClick();
          }
          return true;
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          if (this.props.value !== prevProps.value) {
            this.updateFlagFromNumber(this.props.value);
          }
          if (typeof this.props.customPlaceholder === "function" && prevProps.customPlaceholder !== this.props.customPlaceholder) {
            this.updatePlaceholder(this.props);
          }
          if (this.props.allowDropdown !== prevProps.allowDropdown) {
            this.allowDropdown = this.props.allowDropdown;
          }
          if (this.props.defaultCountry !== prevProps.defaultCountry) {
            this.updateFlagOnDefaultCountryChange(this.props.defaultCountry);
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          document.removeEventListener("keydown", this.handleDocumentKeyDown);
          window.removeEventListener("scroll", this.handleWindowScroll);
          this.unbindDocumentClick();
        }
      }, {
        key: "render",
        value: function render() {
          var inputClass = this.props.inputClassName;
          var wrapperStyle = Object.assign({}, this.props.style || {});
          this.wrapperClass["allow-dropdown"] = this.allowDropdown;
          this.wrapperClass.expanded = this.state.showDropdown;
          var wrapperClass = (0, _classnames.default)(this.wrapperClass, this.props.containerClassName);
          var titleTip = this.selectedCountryData ? "".concat(this.selectedCountryData.name, ": +").concat(this.selectedCountryData.dialCode) : "Unknown";
          var value = this.props.value !== void 0 ? this.props.value : this.state.value;
          return _react.default.createElement("div", {
            className: wrapperClass,
            style: wrapperStyle
          }, _react.default.createElement(_FlagDropDown.default, {
            refCallback: this.setFlagDropdownRef,
            allowDropdown: this.allowDropdown,
            dropdownContainer: this.dropdownContainer,
            separateDialCode: this.props.separateDialCode,
            dialCode: this.state.dialCode,
            clickSelectedFlag: this.clickSelectedFlag,
            setFlag: this.setFlag,
            countryCode: this.state.countryCode,
            isMobile: this.isMobile,
            handleSelectedFlagKeydown: this.handleSelectedFlagKeydown,
            changeHighlightCountry: this.changeHighlightCountry,
            countries: this.countries,
            showDropdown: this.state.showDropdown,
            inputTop: this.state.offsetTop,
            inputOuterHeight: this.state.outerHeight,
            preferredCountries: this.preferredCountries,
            highlightedCountry: this.state.highlightedCountry,
            titleTip
          }), _react.default.createElement(_TelInput.default, {
            refCallback: this.setTelRef,
            handleInputChange: this.handleInputChange,
            handleOnBlur: this.handleOnBlur,
            handleOnFocus: this.handleOnFocus,
            className: inputClass,
            disabled: this.state.disabled,
            readonly: this.state.readonly,
            fieldName: this.props.fieldName,
            fieldId: this.props.fieldId,
            value,
            placeholder: this.props.placeholder !== void 0 ? this.props.placeholder : this.state.placeholder,
            autoFocus: this.props.autoFocus,
            autoComplete: this.props.autoComplete,
            inputProps: this.props.telInputProps,
            cursorPosition: this.state.cursorPosition
          }));
        }
      }]);
      return IntlTelInput2;
    }(_react.Component);
    IntlTelInput.defaultProps = {
      containerClassName: "intl-tel-input",
      inputClassName: "",
      fieldName: "",
      fieldId: "",
      defaultValue: "",
      countriesData: null,
      allowDropdown: true,
      autoHideDialCode: true,
      autoPlaceholder: true,
      customPlaceholder: null,
      excludeCountries: [],
      formatOnInit: true,
      separateDialCode: false,
      defaultCountry: "",
      geoIpLookup: null,
      nationalMode: true,
      numberType: "MOBILE",
      noCountryDataHandler: null,
      onlyCountries: [],
      preferredCountries: ["us", "gb"],
      onPhoneNumberChange: null,
      onPhoneNumberBlur: null,
      onPhoneNumberFocus: null,
      onSelectFlag: null,
      disabled: false,
      autoFocus: false,
      useMobileFullscreenDropdown: true,
      autoComplete: "off",
      telInputProps: {},
      format: false,
      onFlagClick: null
    };
    var _default = IntlTelInput;
    exports.default = _default;
    IntlTelInput.__docgenInfo = {
      "description": "",
      "methods": [{
        "name": "getDerivedStateFromProps",
        "docblock": null,
        "modifiers": ["static"],
        "params": [{
          "name": "nextProps",
          "type": null
        }, {
          "name": "prevState",
          "type": null
        }],
        "returns": null
      }, {
        "name": "updateFlagOnDefaultCountryChange",
        "docblock": null,
        "modifiers": [],
        "params": [{
          "name": "countryCode",
          "type": null
        }],
        "returns": null
      }, {
        "name": "getTempCountry",
        "docblock": null,
        "modifiers": [],
        "params": [{
          "name": "countryCode",
          "type": null
        }],
        "returns": null
      }, {
        "name": "setNumber",
        "docblock": null,
        "modifiers": [],
        "params": [{
          "name": "number",
          "type": null
        }, {
          "name": "preventFormat",
          "type": null
        }],
        "returns": null
      }, {
        "name": "setFlagDropdownRef",
        "docblock": null,
        "modifiers": [],
        "params": [{
          "name": "ref",
          "type": null
        }],
        "returns": null
      }, {
        "name": "setTelRef",
        "docblock": null,
        "modifiers": [],
        "params": [{
          "name": "ref",
          "type": null
        }],
        "returns": null
      }, {
        "name": "setFlag",
        "docblock": null,
        "modifiers": [],
        "params": [{
          "name": "countryCode",
          "type": null
        }, {
          "name": "isInit",
          "type": null
        }],
        "returns": null
      }, {
        "name": "getExtension",
        "docblock": null,
        "modifiers": [],
        "params": [{
          "name": "number",
          "type": null
        }],
        "returns": null
      }, {
        "name": "getNumber",
        "docblock": null,
        "modifiers": [],
        "params": [{
          "name": "number",
          "type": null
        }, {
          "name": "format",
          "type": null
        }],
        "returns": null
      }, {
        "name": "getFullNumber",
        "docblock": null,
        "modifiers": [],
        "params": [{
          "name": "number",
          "type": null
        }],
        "returns": null
      }, {
        "name": "getDialCode",
        "docblock": null,
        "modifiers": [],
        "params": [{
          "name": "number",
          "type": null
        }],
        "returns": null
      }, {
        "name": "isUnknownNanp",
        "docblock": null,
        "modifiers": [],
        "params": [{
          "name": "number",
          "type": null
        }, {
          "name": "dialCode",
          "type": null
        }],
        "returns": null
      }, {
        "name": "addCountryCode",
        "docblock": null,
        "modifiers": [],
        "params": [{
          "name": "countryCodes",
          "type": null
        }, {
          "name": "iso2",
          "type": null
        }, {
          "name": "dialCode",
          "type": null
        }, {
          "name": "priority",
          "type": null
        }],
        "returns": null
      }, {
        "name": "processAllCountries",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }, {
        "name": "processCountryCodes",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }, {
        "name": "processPreferredCountries",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }, {
        "name": "setInitialState",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }, {
        "name": "initRequests",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }, {
        "name": "loadCountryFromLocalStorage",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }, {
        "name": "loadAutoCountry",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }, {
        "name": "cap",
        "docblock": null,
        "modifiers": [],
        "params": [{
          "name": "number",
          "type": null
        }],
        "returns": null
      }, {
        "name": "removeEmptyDialCode",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }, {
        "name": "handleUpDownKey",
        "docblock": null,
        "modifiers": [],
        "params": [{
          "name": "key",
          "type": null
        }],
        "returns": null
      }, {
        "name": "handleEnterKey",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }, {
        "name": "searchForCountry",
        "docblock": null,
        "modifiers": [],
        "params": [{
          "name": "query",
          "type": null
        }],
        "returns": null
      }, {
        "name": "formatNumber",
        "docblock": null,
        "modifiers": [],
        "params": [{
          "name": "number",
          "type": null
        }],
        "returns": null
      }, {
        "name": "updateValFromNumber",
        "docblock": null,
        "modifiers": [],
        "params": [{
          "name": "number",
          "type": null
        }, {
          "name": "doFormat",
          "type": null
        }, {
          "name": "doNotify",
          "type": null
        }],
        "returns": null
      }, {
        "name": "updateFlagFromNumber",
        "docblock": null,
        "modifiers": [],
        "params": [{
          "name": "number",
          "type": null
        }, {
          "name": "isInit",
          "type": null
        }],
        "returns": null
      }, {
        "name": "filterCountries",
        "docblock": null,
        "modifiers": [],
        "params": [{
          "name": "countryArray",
          "type": null
        }, {
          "name": "processFunc",
          "type": null
        }],
        "returns": null
      }, {
        "name": "processCountryData",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }, {
        "name": "handleOnBlur",
        "docblock": null,
        "modifiers": [],
        "params": [{
          "name": "e",
          "type": null
        }],
        "returns": null
      }, {
        "name": "handleOnFocus",
        "docblock": null,
        "modifiers": [],
        "params": [{
          "name": "e",
          "type": null
        }],
        "returns": null
      }, {
        "name": "bindDocumentClick",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }, {
        "name": "unbindDocumentClick",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }, {
        "name": "clickSelectedFlag",
        "docblock": null,
        "modifiers": [],
        "params": [{
          "name": "e",
          "type": null
        }],
        "returns": null
      }, {
        "name": "updatePlaceholder",
        "docblock": null,
        "modifiers": [],
        "params": [{
          "name": "props",
          "type": null
        }],
        "returns": null
      }, {
        "name": "toggleDropdown",
        "docblock": null,
        "modifiers": [],
        "params": [{
          "name": "status",
          "type": null
        }],
        "returns": null
      }, {
        "name": "scrollTo",
        "docblock": null,
        "modifiers": [],
        "params": [{
          "name": "element",
          "type": null
        }, {
          "name": "middle",
          "type": null
        }],
        "returns": null
      }, {
        "name": "updateDialCode",
        "docblock": null,
        "modifiers": [],
        "params": [{
          "name": "newDialCode",
          "type": null
        }, {
          "name": "hasSelectedListItem",
          "type": null
        }],
        "returns": null
      }, {
        "name": "generateMarkup",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }, {
        "name": "handleSelectedFlagKeydown",
        "docblock": null,
        "modifiers": [],
        "params": [{
          "name": "e",
          "type": null
        }],
        "returns": null
      }, {
        "name": "isValidNumber",
        "docblock": null,
        "modifiers": [],
        "params": [{
          "name": "number",
          "type": null
        }],
        "returns": null
      }, {
        "name": "formatFullNumber",
        "docblock": null,
        "modifiers": [],
        "params": [{
          "name": "number",
          "type": null
        }],
        "returns": null
      }, {
        "name": "notifyPhoneNumberChange",
        "docblock": null,
        "modifiers": [],
        "params": [{
          "name": "newNumber",
          "type": null
        }],
        "returns": null
      }, {
        "name": "beforeSetNumber",
        "docblock": null,
        "modifiers": [],
        "params": [{
          "name": "number",
          "type": null
        }, {
          "name": "props",
          "type": null
        }],
        "returns": null
      }, {
        "name": "handleWindowScroll",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }, {
        "name": "handleDocumentKeyDown",
        "docblock": null,
        "modifiers": [],
        "params": [{
          "name": "e",
          "type": null
        }],
        "returns": null
      }, {
        "name": "handleDocumentClick",
        "docblock": null,
        "modifiers": [],
        "params": [{
          "name": "e",
          "type": null
        }],
        "returns": null
      }, {
        "name": "handleInputChange",
        "docblock": null,
        "modifiers": [],
        "params": [{
          "name": "e",
          "type": null
        }],
        "returns": null
      }, {
        "name": "changeHighlightCountry",
        "docblock": null,
        "modifiers": [],
        "params": [{
          "name": "showDropdown",
          "type": null
        }, {
          "name": "selectedIndex",
          "type": null
        }],
        "returns": null
      }, {
        "name": "loadUtils",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }, {
        "name": "autoCountryLoaded",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }],
      "displayName": "IntlTelInput",
      "props": {
        "containerClassName": {
          "defaultValue": {
            "value": "'intl-tel-input'",
            "computed": false
          },
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Container CSS class name."
        },
        "inputClassName": {
          "defaultValue": {
            "value": "''",
            "computed": false
          },
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Text input CSS class name."
        },
        "fieldName": {
          "defaultValue": {
            "value": "''",
            "computed": false
          },
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "It's used as `input` field `name` attribute."
        },
        "fieldId": {
          "defaultValue": {
            "value": "''",
            "computed": false
          },
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "It's used as `input` field `id` attribute."
        },
        "defaultValue": {
          "defaultValue": {
            "value": "''",
            "computed": false
          },
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The value used to initialize input. This will only work on uncontrolled component."
        },
        "countriesData": {
          "defaultValue": {
            "value": "null",
            "computed": false
          },
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "array"
            }
          },
          "required": false,
          "description": "Countries data can be configured, it defaults to data defined in `AllCountries`."
        },
        "allowDropdown": {
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Whether or not to allow the dropdown. If disabled, there is no dropdown arrow, and the selected flag is not clickable.\nAlso we display the selected flag on the right instead because it is just a marker of state."
        },
        "autoHideDialCode": {
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If there is just a dial code in the input: remove it on blur, and re-add it on focus."
        },
        "autoPlaceholder": {
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Add or remove input placeholder with an example number for the selected country."
        },
        "customPlaceholder": {
          "defaultValue": {
            "value": "null",
            "computed": false
          },
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Change the placeholder generated by autoPlaceholder. Must return a string."
        },
        "excludeCountries": {
          "defaultValue": {
            "value": "[]",
            "computed": false
          },
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "string"
            }
          },
          "required": false,
          "description": "Don't display the countries you specify. (Array)"
        },
        "formatOnInit": {
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Format the input value during initialisation."
        },
        "separateDialCode": {
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Display the country dial code next to the selected flag so it's not part of the typed number.\nNote that this will disable nationalMode because technically we are dealing with international numbers,\nbut with the dial code separated."
        },
        "defaultCountry": {
          "defaultValue": {
            "value": "''",
            "computed": false
          },
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Default country."
        },
        "geoIpLookup": {
          "defaultValue": {
            "value": "null",
            "computed": false
          },
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "GeoIp lookup function."
        },
        "nationalMode": {
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Don't insert international dial codes."
        },
        "numberType": {
          "defaultValue": {
            "value": "'MOBILE'",
            "computed": false
          },
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Number type to use for placeholders."
        },
        "noCountryDataHandler": {
          "defaultValue": {
            "value": "null",
            "computed": false
          },
          "type": {
            "name": "func"
          },
          "required": false,
          "description": 'The function which can catch the "no this default country" exception.'
        },
        "onlyCountries": {
          "defaultValue": {
            "value": "[]",
            "computed": false
          },
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "string"
            }
          },
          "required": false,
          "description": "Display only these countries."
        },
        "preferredCountries": {
          "defaultValue": {
            "value": "['us', 'gb']",
            "computed": false
          },
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "string"
            }
          },
          "required": false,
          "description": "The countries at the top of the list. defaults to United States and United Kingdom."
        },
        "onPhoneNumberChange": {
          "defaultValue": {
            "value": "null",
            "computed": false
          },
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Optional validation callback function. It returns validation status, input box value and selected country data."
        },
        "onPhoneNumberBlur": {
          "defaultValue": {
            "value": "null",
            "computed": false
          },
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Optional validation callback function. It returns validation status, input box value and selected country data."
        },
        "onPhoneNumberFocus": {
          "defaultValue": {
            "value": "null",
            "computed": false
          },
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Optional validation callback function. It returns validation status, input box value and selected country data."
        },
        "onSelectFlag": {
          "defaultValue": {
            "value": "null",
            "computed": false
          },
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Allow main app to do things when a country is selected."
        },
        "disabled": {
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Disable this component."
        },
        "autoFocus": {
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Enable auto focus"
        },
        "useMobileFullscreenDropdown": {
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Render fullscreen flag dropdown when mobile useragent is detected. The dropdown element is rendered as a direct child of document.body"
        },
        "autoComplete": {
          "defaultValue": {
            "value": "'off'",
            "computed": false
          },
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Set the value of the autoComplete attribute on the input. For example, set it to phone to tell the browser where to auto complete phone numbers."
        },
        "telInputProps": {
          "defaultValue": {
            "value": "{}",
            "computed": false
          },
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Pass through arbitrary props to the tel input element."
        },
        "format": {
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Format the number."
        },
        "onFlagClick": {
          "defaultValue": {
            "value": "null",
            "computed": false
          },
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Allow main app to do things when flag icon is clicked."
        },
        "value": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The value of the input field. Useful for making input value controlled from outside the component."
        },
        "placeholder": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Static placeholder for input controller. When defined it takes priority over autoPlaceholder."
        },
        "style": {
          "type": {
            "name": "custom",
            "raw": "StylePropTypes"
          },
          "required": false,
          "description": "Style object for the wrapper div. Useful for setting 100% width on the wrapper, etc."
        }
      }
    };
  }
});

// node_modules/react-intl-tel-input/dist/index.js
var require_dist = __commonJS({
  "node_modules/react-intl-tel-input/dist/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _IntlTelInput = _interopRequireDefault(require_IntlTelInput());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _default = _IntlTelInput.default;
    exports.default = _default;
  }
});
export default require_dist();
/*! Bundled license information:

classnames/index.js:
  (*!
  	Copyright (c) 2018 Jed Watson.
  	Licensed under the MIT License (MIT), see
  	http://jedwatson.github.io/classnames
  *)
*/
//# sourceMappingURL=react-intl-tel-input.js.map
